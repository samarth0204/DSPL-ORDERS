// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  username String   @unique
  password String
  contactNumber String
  roles     Role[]
  orders   Order[]  @relation("SalesmanOrders")
  createdAt         DateTime            @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Order {
  id              String        @id @default(uuid())
  clientName      String
  deliveryDetails String
  status          String
  description     String?
  products        Product[]
  fulfillments    Fulfillment[]
  salesman        User          @relation("SalesmanOrders", fields: [salesmanId], references: [id])
  salesmanId      String
  orderDate       DateTime
  createdAt         DateTime            @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Product {
  id                 String              @id @default(uuid())
  name               String
  size               String
  orderBy            String
  quantity           Int
  order              Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId            String
  rate               String?
  fulfilledProducts  FulfilledProduct[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Fulfillment {
  id                String              @id @default(uuid())
  billNumber        String
  description       String?
  date              DateTime
  amount            Float
  status            FulfillmentStatus   @default(PENDING)
  order             Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId           String
  fulfilledProducts FulfilledProduct[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model FulfilledProduct {
  id             String       @id @default(uuid())
  quantity       Int
  fulfillment    Fulfillment  @relation(fields: [fulfillmentId], references: [id], onDelete: Cascade)
  fulfillmentId  String
  product        Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      String
  createdAt      DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

enum FulfillmentStatus {
  PAID
  PENDING
}
enum Role {
  ADMIN
  SALESMAN
  FULFILLMENT
}
